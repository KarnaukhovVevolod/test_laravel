<?php

namespace User;

use App\Models\UserData;
use App\Models\Users;
use App\Services\UserDataService;
use Tests\TestCase;

class ServiceTest extends TestCase
{
    private UserDataService $service;

    /**
     * @return void
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->service = app(UserDataService::class);
    }

    /**
     * Указываем откуда брать данные
     * @param @dataProvider userProvider2
     * @return void
     */
    public function testRecursiveVariants($originalObject, $updateObject, $verificationObject)
    {
        $this->service->recursiveUpdate($originalObject, $updateObject);
        $this->assertEquals($originalObject, $verificationObject);
    }

    /**
     * в данном методе записаны три случая
     * для тестирования метода, который обновляет объект пользователя
     * 1 случай добавляет свойства к пустому объекту
     * 2 случай изменяет и добавляет свойства объекта , а также добавляет массив объекту
     * 3 случай изменяет свойства объекта внутри объекта и внутри массива и добавляет массив к объекту
     */
    public function userProvider2(): array
    {
        return [
            [
                json_decode('{}'),
                json_decode('{"name":"seva","surname":"karnaukhov"}'),
                json_decode('{"name":"seva","surname":"karnaukhov"}')
            ],
            [
                json_decode('{"name":"seva","surname":"karnaukhov"}'),
                json_decode('{"name":"ivan","list":[1,3,5,6]}'),
                json_decode('{"name":"ivan","surname":"karnaukhov","list":[1,3,5,6]}')
            ],
            [
                json_decode('{"mainList":{"name":"seva","surname":"karnaukhov","ListArray":{"0":12,"1":34,"obj":{"body":"html body","dogs":"my fiends","horror":"pila4"}}},"lic":{"film":"brand"}}'),
                json_decode('{"mainList":{"ListArray":{"0":13,"obj":{"dogs":"chappy"}},"list":[1,3,5,6]}}'),
                json_decode('{"mainList":{"name":"seva","surname":"karnaukhov","ListArray":{"0":13,"1":34,"obj":{"body":"html body","dogs":"chappy","horror":"pila4"}},"list":[1,3,5,6]},"lic":{"film":"brand"}}')
            ]
        ];
    }

    /**
     * данный метод обновляет токен для первого пользователя в бд
     */
    public function testUpdateToken(): void
    {
        $users = Users::first();
        $data = $this->artisan('getToken:user --login=' . $users->login . ' ' . '--password=' . $users->password)
            ->assertExitCode(0);
        $data->run();
    }

    /**
     * Данный метод создаёт объекты для первого пользователя в бд
     * методами post() и get()
     */
    public function testTokenCreate(): void
    {
        $users = Users::first();
        $obj = new \stdClass();
        $obj->name = "Aleks";
        $obj->age = 34;
        $obj->work = 'yes';
        $obj = json_encode($obj);
        $response = $this->withHeaders([
            'Content-Type' => 'application/json',
            'Accept' => 'application/json',
            'Authorization' => 'Bearer ' . $users->remember_token
        ])->postJson('/create', ['data' => $obj]);
        $response->assertStatus(201);

        $responseGet = $this->withHeaders([
            'Content-Type' => 'application/json',
            'Accept' => 'application/json',
            'Authorization' => 'Bearer ' . $users->remember_token
        ])->get('/create' . '?data=' . $obj);
        $responseGet->assertStatus(201);
    }

    /**
     * Данный метод обновляет свойство у
     * последних два объекта вставленных первым пользователем
     * методами post() и get()
     */
    public function testTokenUpdate(): void
    {
        $users = Users::first();
        $obj = new \stdClass();
        $obj->work = 'no no';
        $userData = UserData::where('client_id', $users->id)->orderBy('id', 'desc')->limit(2)->get();

        $obj = json_encode($obj);
        $response = $this->withHeaders([
            'Content-Type' => 'application/json',
            'Accept' => 'application/json',
            'Authorization' => 'Bearer ' . $users->remember_token
        ])->postJson('/update/' . $userData[0]->id, ['data' => $obj]);
        $response->assertStatus(202);

        $responseGet = $this->withHeaders([
            'Content-Type' => 'application/json',
            'Accept' => 'application/json',
            'Authorization' => 'Bearer ' . $users->remember_token
        ])->get('/update/' . $userData[1]->id . '?data=' . $obj);
        $responseGet->assertStatus(202);
    }
}
